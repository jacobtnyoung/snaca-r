[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Social Network Analysis for Crime Analysts using R",
    "section": "",
    "text": "Preface\nThe field of crime analysis is rapidly evolving, driven by advancements in technology and the growing availability of rich, complex data. Among the most pressing challenges for crime analysts is the need to make sense of these data, particularly when they involve relationships between individuals, groups, or organizations. Social network analysis (SNA) provides a powerful set of tools for mapping and understanding these connections, enabling analysts to uncover patterns, identify key players, and generate actionable insights. This book, Social Network Analysis for Crime Analysts using R, is designed to bridge the gap between theory and application, offering crime analysts a practical guide to using R, an open-source statistical programming language, and RStudio, an integrated development environment that provides a user-friendly interface for coding, data analysis, visualization, and report generation.\nWhy R and RStudio? RStudio is more than just software. It provide a robust ecosystem that empowers users to wrangle, visualize, and analyze data with precision and flexibility. For crime analysts, learning the R language and how to work in RStudio offers a significant advantage: they are free, widely supported by a global community, and capable of handling the types of network data that traditional tools struggle to process. With RStudio, analysts can customize workflows, automate repetitive tasks, and leverage advanced techniques such as clustering algorithms, centrality measures, and visualization methods: all essential for modern SNA. By working in RStudio, even those new to programming can gain the confidence to manipulate data and produce meaningful outputs. The ability to write reproducible code also ensures that analyses are transparent and can be revisited or adapted as cases evolve.\nThis book is written with the unique needs of crime analysts in mind. Using real-world examples and step-by-step instructions, it demonstrates how SNA can be conducted in Rstudio to solve practical problems, from identifying influential actors in a gang network to assessing the vulnerability of criminal enterprises. The focus is not only on teaching the mechanics of RStudio but also on fostering a deeper understanding of the concepts behind social network analysis. Whether you are new to network analysis or seeking to expand your analytic toolkit, this book will provide you with the skills and confidence to harness the power of RStudio and SNA in your work. Together, these tools can transform how crime analysts approach data, enabling them to uncover critical insights and ultimately contribute to safer communities.\nThis book is a companion to Social Network Analysis for Crime Analysts. It is organized as tutorials that show the “how to” of SNA in RStudio that correspond to conceptual chapters in the Social Network Analysis for Crime Analysts textbook.\nEach tutorial in this book will contain R code which is in “code chunks”. You will notice a code chunk because the font will change. Code chunks will have text that looks like this. There is also regular text. The R code chunks can be copied and pasted directly into R and RStudio. As you work through the tutorials, follow along in the software by coping and pasting the code and seeing it work on your end.\nLet’s get to it!"
  },
  {
    "objectID": "snaca-r-intro-to-r.html#things-about-r-to-get-you-started",
    "href": "snaca-r-intro-to-r.html#things-about-r-to-get-you-started",
    "title": "Tutorial 01 - Getting Started with R",
    "section": "10 Things about R to get you started:",
    "text": "10 Things about R to get you started:\n\n1. What is R\nR is a dialect of the S language that was written by John Chambers and others at Bell tutorials in the 70s. In the 90s, R was developed and made avaitutorialle to the public with the GNU general public license. Importantly, R is free, meaning that you don’t have to pay for it (duh), but it is also open source, meaning that you have freedom to use and modify it.\nR is an operating system for data science software. Just as Windows allows you to turn on your computer, open a web browser, moved files around, and write a paper using MS Word, R allows you to install and run packages and manage files while organizing large data projects. Just like Windows would be a very boring piece of software without all of the applications you run while on the computer, R would be a boring language without all of the packages it can run.\n\n\n2. Installing and Starting\nGo to http://cran.r-project.org. Find the “Download R for…” link that is appropriate for your operating system.\nWhen R starts it loads some basic info and provides you with a prompt: &gt;\nThis prompt is the fundamental entry point for communicating with R. We type expressions at the prompt, R evaluates these expressions, and returns output.\n\n\n3. Objects in R\nR is a programming language. That means, it allows us to give instructions to our computer to do stuff. We will see that there is a lot of “stuff” we can do. But, the basic orientation to R is understanding objects.\nWhat is an object? Without getting to philosophical, an object is something we create in the R environment. Think of an R session as a box. We are creating objects and putting them into the box. This is quite different from data analysis programs like SPSS or Stata.\nWe create objects by using the assignment operator: &lt;-\nWhat you type on the right is assigned to what you type on the left. For example:\ny &lt;- 4 (we have assigned the value 4 to the object y)\nx &lt;- 6 (we have assigned the value 6 to the object x)\nz &lt;- y (we have assigned the value of the object y to the object z, i.e. z = 4)\nAfter assigning a value to an object, type the name of the object and hit return/enter to see what the value is.\nObjects can start with a letter or a period. But, you cannot name a object starting with a number (or other symbols used by R).\nSome examples:\nthe.number.two &lt;- 2\n2 &lt;- the.number.two\n2.the.number &lt;- 2\n;.2 &lt;- 2\nR is case sensitive (i.e. A is a different object than a). R is insensitive to white space though.\nThese two examples are treated the same in R:\nx &lt;- 2\nx&lt;-              2\nTo have R ignore text, use the # sign to make comments.\nFor example: x &lt;- 2 # this assigns the value 2 to object x.\nIn R there are no carriage returns (e.g. Stata uses /// in code). Sorry :("
  },
  {
    "objectID": "snaca-r-intro-to-r.html#functions-in-r",
    "href": "snaca-r-intro-to-r.html#functions-in-r",
    "title": "Tutorial 01 - Getting Started with R",
    "section": "4. Functions in R",
    "text": "4. Functions in R\nA major strength of R is the ability to manipulate objects using functions. A function takes an argument (aka input) and returns some value (aka output).\nFor example, suppose we wanted to create a list of numbers, called a vector. We want to create an object that is defined by the list of numbers. In R, there is a preprogrammed function c(), which combines or concatenates values to create a single object. We can create an object x, that is a vector of 1, 2, 3, 4, and 5 using: x &lt;- c(1,2,3,4,5).\nThis reads: the object x is assigned the values 1, 2, 3, 4, and 5. The function is “c” and the argument is 1,2,3,4,5.\nThe number of values (aka elements) a vector contains is referred to as the “length”. We can use the length() function to return this information for us. For example: length(x) shows that the vector x has 5 values or elements.\nReminder: R is a language, so part of the learning curve is getting familiar with the names of functions."
  },
  {
    "objectID": "snaca-r-intro-to-r.html#referencing-and-indexing-objects-in-r",
    "href": "snaca-r-intro-to-r.html#referencing-and-indexing-objects-in-r",
    "title": "Tutorial 01 - Getting Started with R",
    "section": "5. Referencing and Indexing Objects in R",
    "text": "5. Referencing and Indexing Objects in R\nIn R, specific elements in an object are referenced by using brackets (i.e. [ or ]).\nFor example, let’s create a vector and work with it:\n\nx &lt;- c( 1,2,3,4,5 ) # create the vector.\nx\nx[5] # what is the fifth element  in x?  \nx[2:4] # what are the second through fourth elements in x?  \nx[ c( 1,4 )] # what are the first and fourth elements in x?  \n\nNote the difference in use between [#:#] and [c(#,#)]. The colon : means “through” and the comma , means “and”.\nWe can also change values by indexing:\n\nx[5]   &lt;- 3 # change the fifth element in x to 5.  \nx[1:5] &lt;- 0 # change the first through fifth elements in x to 0.  \n\nUsing brackets to identify particular elements, called indexing, is VERY useful. By using indexing, we can create objects from other objects, or reference particular locations. The utility of this will be more obvious later.\n\n6. Types of objects (“classes”) in R\nObjects in R can be of different types or classes. There are four:\n\nnumeric, a number (e.g. 1, 2)\ncharacter, a letter or word (e.g. \"Shelley\", \"Trevor\")\nfactor, a category (e.g. female, male)\nlogical, True or False values (e.g. TRUE, FALSE)\n\nEach type of vector serves different purposes:\n\nnumeric: keep track of quantitative measures, counts, or orders of things\n\ncharacter: store non-numeric data, typically unstructured text\n\nfactor: represent distinct and mutually-exclusive categories\n\nlogical: designate cases that meet some criteria, usually group inclusion\n\nFor example, let’s build a few objects:\n\nnums &lt;- c( 1, 2, 3 )\nnames &lt;- c( \"Shelley\", \"Trevor\" )\nsex &lt;- factor( c( \"female\", \"male\" ) )\nis_female &lt;- sex == \"female\"\n\nNote that numbers do not require \" \" around them but characters do require \" \" around them. Also, that the object is.female is created by stating a condition.\nEach object has a class, which defines the “type” of vector a particular object is:\n\nname_list &lt;- c( \"Hugo\",\"Desmond\",\"Largo\" ) # assign the characters to an object.\nis.character( name_list ) # is the object a character vector?\nis.numeric( name_list ) #is the object a numeric vector?  \nis.factor( name_list ) # is the object a factor vector?\nis.logical( name_list ) # is the object a logical vector?\n\nMissing values are dealt with in R by NA.\n\ny &lt;- c( 3,NA,10 ) # create a vector with a missing value.\n2*y # multiple the vector by 2.  \nis.na( y ) # which positions in y have missing values?  \ny[ is.na( y )] #subset meeting condition.\ny[ !is.na( y )] # subset meeting a different condition.\n\n\n\n7. Matrices in R\nIn addition to vectors, we can create a matrix, which is a 2-dimensional representation of data. A matrix has dimensions r X c which means rows by columns. The number of rows and columns a matrix has is referred to as its “order” or “dimensionality”. This information is returned by using the dim() function. Matrices can be created by combining existing vectors using the rbind() and cbind() functions. The rbind() function means “row bind” and binds together vectors by rows. Think of it as stacking vectors on each other. The cbind() function means “column bind” and binds together vectors by rows. Think of it as placing them side by side. Let’s take a look:\n\nx  &lt;- c( 6,5,4,3,2 )\ny  &lt;- c( 8,7,5,3,1 )\nm1 &lt;- rbind( x,y ) #bind x and y by row to create a 2 X 5 matrix.\nm1 #just enter the name of the object to print it.\nm2 &lt;- cbind( x,y ) #bind x and y by column to create a 5 X 2 matrix.\nm2 #just enter the name of the object to print it.\n\nFor both functions, the dimensions of the vectors must be the same (i.e. same number of rows and columns).\nLet’s see some examples:\n\nl  &lt;- c( 6,5,4,3,2 )\nn  &lt;- c( 8,7,5 )\nm2 &lt;- rbind( l,n ) # returns an error because the dimensions differ.\n\nWe can index the matrix m1 or m2 by using the brackets [ ] with a comma between the two dimensions. Since a matrix is 2-dimensions, we can reference a specific element, an entire row, or an entire column:\n\nm1[2,2] #what is the value of the element in the 2nd row, 2nd column?\nm1[,2]  #what are the values in the second column?\nm1[2,]  #what are the values in the second row?\n\n\nm2[2,2] &lt;- 0 #change the value to zero.\nm2[2,]  &lt;- 0 #change the second row to zeros.\nm2[,2]  &lt;- 0 #change the second column to zeros.\n\nIn the code chunk above, note the difference between [,#] and [#,]. A comma in front of the argument (i.e. [,#]) applies to the columns) and a common after the argument (i.e. [#,]) applies to the rows.\nAlso, notice that m1[2,2], is an object, just as m1 is an object. In effect, we are subsetting the object m1 when we index it.\nMatrices can also be created from a list of numbers using the matrix() and c() functions.\n\nm3 &lt;- matrix( c( 1,0,1,0,0,1,0,1,0 ),nrow=3,ncol=3 )\nm3\n\n\n\n8. One of the most important functions in R: help()\nA useful feature of R is an extensive documentation of each of the functions. To access the main R help archive online, type: help.start()\nThe help() function, or a simple ?, can be used to get help about a specific function. For example: help(c) or ?c returns the help page for the c() function.\nTake a look at the help page. The first line shows you the function and the package it is written for in brackets (more on packages below). The help page provides a description, how to use it (i.e. what are the arguments), and a description of what each argument does. Further details and examples are provided as well.\nLet’s take a look at another function that creates sequences of numbers, the seq( ) function. There are several ways to use the seq( ) function. The most common are:\n\nseq( from=, to=, by= ) # Starts at from, ends at to, steps defined by by.\nseq( from=, to=, length= ) # Starts at from, ends at to, steps defined by length.  \n\nFor example:\nif we want to create an object of 5 values that starts with 1 and ends with 5, we type: seq( from=1, to=5, by=1 ).\nif we want to create an object of 5 values that starts with 1 and ends with 9, we type: seq( from=1, to=9, by=2 ).\nWe could also have used the length= argument: seq( from=1, to=10, length=5 ).\nSince R knows that from= or to= or by= or length= are arguments, we do not have to type them in the syntax: seq( 1, 9, 2 ) is identical to seq( from=1, to=9, by=2 ) (as far as R is concerned).\nFor the help function to work, you need to know the exact name of the function. If you don’t know this, but have a fuzzy idea of what it might be are what you want the function to do, you can use the help.search(\"fuzzy notion\") function (or just put ?? in front of the word).\nFor example, say you want to calculate the standard deviation for an object, but do not know the function name. Try: help.search( \"standarddeviation\" ) or ??standarddeviation (note the absence of a space). This returns the list of help topics that contain the phrase. We see that the standard deviation function is called sd().\n\n\n9. Packages and the install.packages() and library() Functions\nR has MANY preprogrammed functions that are automatically loaded when you open the program. Functions are stored in “packages”. Although there are many preprogrammed functions, there are even MORE functions that you can install on your own. A package in R is a collection of functions, usually written for a specific purpose.\nWe can see the packages available from CRAN at http://cran.r-project.org/. Just click on the “packages” link or go to https://cran.r-project.org/web/packages/index.html. As of writing this there are nearly 13,000 packages. There is a WIDE variety of packages available, this is another reason why R is awesome. If you can think it, someone has probably written a package for it in R (and if not, you can write one and contribute [isn’t it great!]).\nTake a few moments and look through the packages\nIf there is a particular package you want to add, you simply use the install.packages() function like this: install.packages(\"package name\").\nAfter the package is installed on your machine, you do not need to reinstall it each time you open a new session. Rather, you just need to load the package using the library() function like this: library(\"package name\").\nSome packages require other packages for them to work. If there is an error, you need to install the additional packages.\nNote that each time you open R you have to load any packages that you manually loaded using the install.packages() function. In other words, if we closed R and then reopened it, we would need to type library( \"ergm\" ) to load the functions in ergm. Note that we do not have to reinstall the package using install.packages(), we just have to load the library.\nIf you have installed the package, but have not loaded it, R will return an error saying that a particular function is not found.\nFor example, the function rgraph() in the package sna (which is a set of tools for working with social networks that we will use for this course) is used to create random graphs. Type ?rgraph and you get an error stating that there is no documentation avaitutorialle. This is because the sna library has not been loaded (even if you have installed sna). Typing install.packages( \"sna\" ) and library( sna ) prior to ?rgraph() will solve this problem.\nA final point on loading packages. Since anyone can write and contributes packages to R, it is not surprising that some packages occasionally use the same names for functions. When you have loaded libraries for packages that have conflicting functions, R will output a message indicating there is an issue.\nFor example, the sna package and the tnet package both have a function called betweenness, but the functions are programmed differently. When you load tnet after loading sna (or visa versa), R will give you a warning that an “object is being masked”. That means the functionality of betweenness in sna is no longer used. Let’s check it out:\n\ninstall.packages( \"sna\" )\nlibrary( sna )\ninstall.packages( \"tnet\" )\nlibrary( tnet )\n\nThis can be a bit frustrating. In such cases, you can unload the package using the detach() function. See: ?detach for an example.\n\n\n10. R Session Management\nAll variables created in R are stored in the “workspace”. Think of it as a work bench that has a bunch of stuff on it that you have created.\nTo see what exists in the workspace, type: ls().\nWe can remove specific variables with the rm() function. This helps clear up space (i.e. conserve memory). For example:\n\nx &lt;- seq( 1,5,1 ) # create the object.\nls()          # see the objects.\nrm( x )         # remove the object x.\nls()          # no more x.\n\nTo remove everything from the workspace use: rm( list=ls() ). This is helpful for starting a session to make sure everything is cleaned out.\nWhen you start R, it nominates one of the directories on your hard drive as a working directory, which is where it looks for user-written programs and data files.\nTo determine the current directory, type: getwd().\nYou can set the working directory also by typing: setwd(\"your desired directory here\").\nFor example, if you are using Windows OS and want to set your directory to be the “C” drive, type: setwd( \"C:/\" ). NOTE: when you copy and paste filepaths in Windows, the folders are denoted with \\, while R uses /.\nOr, if you are using Mac OS and want to set your directory to be a folder called “Users”, type: setwd( \"/Users\" ).\nOn the Windows OS you can set R to automatically start up in your preferred working directory by right clicking on the program shortcut, choosing properties, and completing the ‘Start in’ field. On the Mac OS you can set the initial working directory using the Preferences menu.\nTo save the workspace use the save.image() function. This function requires a file path, a file name, and the extension “.RData” which is the format for an R workspace file.\nFor example, to save a workspace called “OurFirstTutorial” to the current directory, simply type: save.image(\"OurFirstTutorial.Rdata\"). You can also write in the directory of you want to save it somewhere else. You can also do this by the pull-down menu with the File/Save option.\nTo load a previously saved workspace, you can either click on the file outside of R or use the load() function (e.g. load(\"OurFirstTutorial.Rdata\")). If you get an error, make sure you are referring the correct directory. You can also choose Load Workspace from the pull-down menu.\nNote that only the objects in the workspace are saved, not the text of what you have written.\n\n\n11. (Bonus!) R Studio\nYou may be surprised to discover how little functionality is implemented in the standard R GUI (i.e. graphical user interface). The standard R GUI implements only very rudimentary functionality through menus: reading help, managing multiple graphics windows, editing some source and data files, and some other basic functionality. There are no menu items, buttons, or palettes for loading data, transforming data, plotting data, or doing any real work with data. Commercial applications like SAS, SPSS, and Stata include user interfaces with much more functionality.\nThis was just the nature of working with R until some awesome human beings created RStudio. RStudio is one of several projects to build an easier-to-use GUI for R. It is a free, open-source IDE (i.e. integrated development environment) for working with R. Unlike the standard R GUI, RStudio tiles windows on the screen and puts different windows in different tabs. RStudio can be downloaded from: http://www.rstudio.com.\n\n\nRStudio workthrough\nOk, now open RStudio and let’s take a look!\nNow, that you have RStudio up and running, try rerunning some of the code above. You will see that R operates within the RStudio environment. However, there are more tools available in RStudio which we will use."
  },
  {
    "objectID": "snaca-r-intro-to-r.html#test-your-knowledge",
    "href": "snaca-r-intro-to-r.html#test-your-knowledge",
    "title": "Tutorial 01 - Getting Started with R",
    "section": "Test Your Knowledge",
    "text": "Test Your Knowledge\n\nAfter installing R, what does the &gt; prompt represent?\nCreate an object called a with the value 7.\nWhich of the following is a valid object name?\n\n3cats\n.hidden_data\nmy-object\n_underscore\n\nExplain what the following code does: b &lt;- 10?\nWhat is a function in R? Explain using the c() function as an example.\nCreate an object called numbers that contains the values 2, 4, 6, 8, and 10 using the c() function.\nType the following code: length( numbers ). What is the meaning of the number it returns?\nCreate a vector z with the values 10 through 20. Now, write code to retrieve:\n\nThe 3rd element in z.\nThe 2nd through 5th elements in z.\nThe 1st and last elements in z.\n\nWhat is the difference between z[3:5] and z[ c(3,5) ]?\nWhat is the purpose of the install.packages() function? The library() function?\nWhy might you see a “function not found” error when trying to use a function from a package?\nLook through the packages on the CRAN repository. Find one and install it."
  },
  {
    "objectID": "snaca-r-intro-to-r.html#tutorial-summary",
    "href": "snaca-r-intro-to-r.html#tutorial-summary",
    "title": "Tutorial 01 - Getting Started with R",
    "section": "Tutorial Summary",
    "text": "Tutorial Summary\nThis tutorial provides a quick introduction to R. R is a versatile and open-source programming language designed for data science and statistical analysis. As we will see, it is one of the best environments for working with social network data. We began with an overview of R’s history, emphasizing its unique features, such as being free and customizable through numerous packages. The tutorial then guides readers through essential concepts, including installing R, understanding the R environment, and creating objects, which are fundamental building blocks of any R session. Readers learn how to use functions, reference and manipulate objects, and work with different data types (numeric, character, factor, and logical). The tutorial also covers indexing techniques for accessing specific elements within objects and introduces matrices as a two-dimensional data structure. Practical advice is provided on navigating R’s extensive documentation, installing and loading packages, and managing the R workspace effectively. We also reviewed (briefly) RStudio, a powerful integrated development environment that enhances the R user experience. You are now equipped with foundational skills to explore R further and apply it to real-world data tasks as you continue developing your skills as a crime analyst."
  },
  {
    "objectID": "snaca-r-rmarkdown.html#data-driven-documents",
    "href": "snaca-r-rmarkdown.html#data-driven-documents",
    "title": "Tutorial 02 - Introduction to Data-Driven Documents using RMarkdown",
    "section": "Data-Driven Documents",
    "text": "Data-Driven Documents\n\nWhat are Data-Driven Documents?\nData-driven documents are formats that combine text and analysis (i.e. data and code). By combining everything in a single file, we promote transparency and reproducibility. For any given table, figure, or model in the document, you should be able to easily discern how it was created, from what data, and what analysis was used.\nWe will use the R Markdown format.\n\nHow do Data-Driven Documents Work?\nAll of the document formats build from a simple text formatting convention called markdown.\nTo create an R Markdown document, you need three things:\n\nA header to specify the document type\nSome text (formatted in markdown)\nSome code (inside a “code chunk”)\n\nLet’s see how it works!"
  },
  {
    "objectID": "snaca-r-rmarkdown.html#rmarkdown-in-rstudio",
    "href": "snaca-r-rmarkdown.html#rmarkdown-in-rstudio",
    "title": "Tutorial 02 - Introduction to Data-Driven Documents using RMarkdown",
    "section": "RMarkdown in RStudio",
    "text": "RMarkdown in RStudio\nFirst, you need to install the rmarkdown and knitr packages using:\n\ninstall.packages( \"rmarkdown\" )\ninstall.packages( \"knitr\" )\n\nHere is a diagram of how to open an RMarkdown file and create an output file:\n\n\n\n\nsequenceDiagram\n    participant User\n    participant RStudio\n    User-&gt;&gt;RStudio: Open RStudio\n    User-&gt;&gt;RStudio: File &gt; New File &gt; RMarkdown...\n    RStudio--&gt;&gt;User: RMarkdown template setup window\n    User-&gt;&gt;RStudio: Specify title, author, and output format (e.g., HTML, PDF, Word)\n    User-&gt;&gt;RStudio: Click \"OK\"\n    RStudio--&gt;&gt;User: Generates a new RMarkdown file\n    User-&gt;&gt;RStudio: Start editing text and adding code chunks\n    User-&gt;&gt;RStudio: Save the file (.Rmd extension)\n    User-&gt;&gt;RStudio: Click \"Knit\" to generate the output document\n\n\n\n\n\n\nLet’s walk through this. First, you need to open RStudio. Then, using the dropdown menu select File &gt; New File &gt; RMarkdown. This will bring up the RMarkdown template window. In this window, you can specify the title, author, and output format. Click “OK” and RStudio will create a new RMarkdown file. An RMarkdown file has two essential pieces: text and code chunks (discussed more below). The last piece is to click the “Knit” button to create the output document.\n\nA Closer Look\n\nKnitting R Markdown Files\nCode is placed inside of “chunks” in the documents:\n\n\n\n\n\nWhen you “knit” a file RStudio will run all of code, embed the output into your document, and then convert the file to whichever type you have specified in the file header.\n\n\n\nOutput Types\nYou can select from many different document types, including HTML pages, Microsoft word, presentation formats, or dashboards.\nCheck out these examples:\nR Markdown Formats R Markdown Gallery\n\nHTML Pages\n---\noutput: html_document\n---\n\n\n\n\n\n\n\n\nDashboards\n---\noutput: flexdashboard::flex_dashboard:\n---\n\n\n\n\n\n[ dashboard example ] [ source code ] [ blog about the tracker ]\n\n\nPDFs\n---\noutput: pdf_document\n---\n\nA note on PDFs\nIf you would like to knit to PDF you need one additional program. TeX creates publication-quality PDF files. The open-source version is called MiKTeX download page.\nIf you have problems, you can find some nice tutorials like this one: https://www.reed.edu/data-at-reed/software/R/r_studio_pc.html\n\n\n\n\nWorking with Markdown\nMarkdown is a set of simple conventions for formatting text in R Markdown (RMD) files.\nIt makes it easy to create professional documents with minimal effort.\nHere are the basic formatting rules for Markdown:\n\nHeaders\n# Heading One (h1)\n\n## Heading Two (h2)\n\n### Heading Three (h3)\n\n#### Heading Four (h4)\n\n##### Heading Five (h5)\n\n###### Heading Six (h6)\n\n\nText Style\nWith Markdown, it is possible to emphasize words by making them *italicized*, using *astericks* or _underscores_, or making them **bold**, using **double astericks** or __double underscores__. \n\nOf course, you can combine those two formats, with both _**bold and italicized**_ text, using any combination of the above syntax. \n\nYou can also add a strikethrough to text using a ~~double tilde~~.\nWith Markdown, it is possible to emphasize words by making them italicized, using astericks or underscores, or making them bold, using double astericks or double underscores.\nOf course, you can combine those two formats, with both bold and italicized text, using any combination of the above syntax.\nYou can also add a strikethrough to text using a double tilde.\n\n\nLists\n\nUnordered\n* First item\n* Second item\n* Third item\n    * First nested item\n    * Second nested item\n\nFirst item\nSecond item\nThird item\n\nFirst nested item\nSecond nested item\n\n\n\n\nOrdered\n1. First item\n2. Second item\n3. Third item\n    1. First nested item\n    2. Second nested item\n\nFirst item\nSecond item\nThird item\n\nFirst nested item\nSecond nested item\n\n\n\n\n\nHyperlinks\nCreate links by wrapping the link text in square brackets [ ], and the URL in adjacent parentheses ( ).\n[Google News](https://news.google.com)\nGoogle News\n\n\nImages\nInsert images in a similar way, but add an exclamation mark in front of square brackets [ ], and the image file name goes in the parentheses ( ).\n![alt_text_here](image_file.png)\nThe alt text appears when the image cannot be located, or is read by devices for the blind when the mouse hovers over the image. It\nOr you can link directly to an image online using the URL address of the image:\n![](https://www.rodaw.com/wp-content/uploads/2017/02/Mark-Down-MonsterDogLampShade-1.jpg)\n\n\n\nTables\n| Title 1          | Title 2          | Title 3         | Title 4         |\n|------------------|------------------|-----------------|-----------------|\n| First entry      | Second entry     | Third entry     | Fourth entry    |\n| Fifth entry      | Sixth entry      | Seventh entry   | Eight entry     |\n| Ninth entry      | Tenth entry      | Eleventh entry  | Twelfth entry   |\n| Thirteenth entry | Fourteenth entry | Fifteenth entry | Sixteenth entry |\n\n\n\n\n\n\n\n\n\nTitle 1\nTitle 2\nTitle 3\nTitle 4\n\n\n\n\nFirst entry\nSecond entry\nThird entry\nFourth entry\n\n\nFifth entry\nSixth entry\nSeventh entry\nEight entry\n\n\nNinth entry\nTenth entry\nEleventh entry\nTwelfth entry\n\n\nThirteenth entry\nFourteenth entry\nFifteenth entry\nSixteenth entry"
  },
  {
    "objectID": "snaca-r-rmarkdown.html#tutorial-summary",
    "href": "snaca-r-rmarkdown.html#tutorial-summary",
    "title": "Tutorial 02 - Introduction to Data-Driven Documents using RMarkdown",
    "section": "Tutorial Summary",
    "text": "Tutorial Summary\nThis tutorial introduced you to the power of RMarkdown for creating reproducible, data-driven documents using RStudio. By combining narrative text, code, and analytical outputs into a single file, RMarkdown ensures transparency and efficiency in reporting workflows, eliminating the need to switch between multiple programs. This can be a valuable tool for any crime analyst. We (briefly) covered how to generate various output formats, such as HTML, Word, and PDF, which are customizable to suit different professional contexts. The tutorial also covers the basics of Markdown for text formatting, embedding images, creating tables, and hyperlinks, offering a comprehensive foundation for crafting professional documents."
  }
]