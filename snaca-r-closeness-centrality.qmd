```{r setup, include=FALSE}

knitr::opts_chunk$set(
  eval = TRUE,
  echo = TRUE, 
  message=FALSE, 
  warning=FALSE 
  )

```

```{r,echo=FALSE}

library( sna )     # for sna functions
library( network ) # for working with network objects

```

# Closeness Centrality and Centralization {.unnumbered}

How do we know whether a node is important in a network? As was discussed at the beginning of the chapter on [Degree Centrality](https://jacobtnyoung.github.io/snaca-textbook/snaca-centrality-degree.html), one of the most popular concepts in network analysis is *centrality*. In that chapter, we covered how centrality can be measured by the number of edges incident on a node. But, that is not the only way that a node can be *central*. The chapter on [Closeness Centrality](https://jacobtnyoung.github.io/snaca-textbook/snaca-centrality-closeness.html) discussed an alternative conceptualization, *closeness*, where important nodes are those who are "close" to other nodes in the network.

In this tutorial, we will examine how to calculate closeness centrality and centralization scores in R using the `closeness()` and `centralization()` functions in the `sna` package.

## Closeness Centrality (Undirected Binary Graphs)

How *close* is a node to other nodes?

In an undirected binary graph, **closeness centrality** measures how near a node is to the other nodes in the network. This is based on the inverse of the distance of each actor to every other actor.

Terminology:

-   The **distance**, $d(n_i,n_j)$, is the length of the path between *i* and *j*. For example, suppose Sally is friends with Tom, Ulrica, and Violet; Violet is friends with Tom and Walter. What are the *paths* from Violet to Ulrica? Walter from Ulrica?

-   A **geodesic** is the shortest path between two nodes. What is the *shortest path* (i.e. geodesic) from Violet to Ulrica?

**Closeness** centrality is calculated as:

$$C_C(n_i) = [\sum\limits_{j=1}^g d(n_i,n_j)]^{-1}$$

or

$$\frac{1}{[\sum\limits_{j=1}^g d(n_i,n_j)]}$$ Here is what the equation is doing:

-   first identify the distances between *i* and *j* (i.e. $d(n_i,n_j)$) and sum them.

-   Note that $\sum\limits_{j=1}^g$ is indicating that for *i*, we want to sum over all the *j*s in the graph, *g*.

-   then take the inverse of this quantity.

### Manually Calculating Closeness Centrality

We can manually calculate the distance matrix using the `geodist()` function in the `sna` package. Let's take a look:

```{r,eval=FALSE}

# now, take a look at the geodist() function
?geodist

```

Let's go ahead and set up a simple matrix and examine the geodesics for that matrix.

```{r}

# set up the matrix
u_mat <- rbind(
  c( 0,1,0,0,0 ),
  c( 1,0,1,0,0 ),
  c( 0,1,0,1,1 ),
  c( 0,0,1,0,1 ),
  c( 0,0,1,1,0 ))

# now set the names
mat_names <- c( "Jen","Tom","Bob","Leaf","Jim" )
rownames( u_mat ) <- mat_names
colnames( u_mat ) <- mat_names

# let's look at what the geodist() function creates
u_mat_geodist <- geodist( u_mat )
class( u_mat_geodist )
u_mat_geodist

```

We can see that the function creates an object of class `list`. In the object, there are two arrays, `$counts` and `$gdist`. The `$counts` array is a matrix containing the number of geodesics between each pair of vertices. The `$gdist` array is a matrix containing the geodesic distances between each pair of vertices.

To get the geodesic distances, we use the `$` sign to select a single array from the list:

```{r}

# print out the distances
u_mat_geodist$gdist

# if we take the row sum of this object, we get the distances
distance <- rowSums( u_mat_geodist$gdist )
distance

```

Now, let's plot the graph so we can visualize what the distance score is showing. To make it easier to see, let's add the centrality info to the labels and size the nodes by centrality. That will make it easier to visualize.

```{r}

# create a vector of labels that combines the name with the distances
# use the paste() function to put characters and numbers together
names_dist <- paste( 
  mat_names, # the names of the vertices
  ", ", # add a comma to separate name from degree
  round( distance, 0 ), # add the rounded distance
  sep = "" ) # remove the space between the two inputs 

# change the margins using the mar= argument
par( mar=c( 0.1, 0.5, 1, 0.1 ) )

# set the seed to reproduce the same layout
set.seed( 507 )

# render the plot
gplot( 
  u_mat,
  gmode = "graph",
  label = names_dist,
  label.cex = 0.6,
  vertex.col = "lightblue"
  )

```

In this plot, we see that **Jen** has a distance score of *9*. (She is so far away!) To see how we get that score, let's do the calculation:

-   recall that $d(n_i,n_j)$ is the length of the path from *i* to *j*

    -   Jen -\> Tom ($d(Jen,Tom)$) is 1

    -   Jen -\> Bob ($d(Jen,Bob)$) is 2

    -   Jen -\> Leaf ($d(Jen,Leaf)$) and Jen -\> Jim ($d(Jen,Jim)$) are both 3

    -   So that is $\sum\limits_{Jen}^g d(Jen,Tom/Bob/Leaf/Jim) = 1+2+3+3=9$.

To get the closeness centrality score, we divide that quantity by 1.

```{r}

# take the reciprocal
close_cent <- 1 / rowSums( u_mat_geodist$gdist )
close_cent

# we can calculate the standardized closeness centrality by multiplying by g-1
g <- dim( u_mat )[1]
close_cent_s <- ( g-1 ) * close_cent
close_cent_s

# put it all together in a table
dist_close_table <- round( rbind( distance, close_cent, close_cent_s ), 2 )
rownames( dist_close_table ) <- c( "distance", "closeness", "stand.close" )
colnames( dist_close_table ) <- mat_names
dist_close_table

```

Now, let's take a look at this info in a series of plots. To render these, let's use a `for` loop:

```{r,echo=TRUE,eval=TRUE,message=FALSE}

names_close <- paste( 
  mat_names, # the names of the vertices
  ", ", # add a comma to separate name from degree
  round( close_cent, 2 ), # add the rounded closeness centrality score
  sep = "" ) # remove the space between the two inputs 

names_s_close <- paste( 
  mat_names, # the names of the vertices
  ", ", # add a comma to separate name from degree
  round( close_cent_s, 2 ), # add the rounded closeness centrality score
  sep = "" ) # remove the space between the two inputs 

# create the inputs for the loop
titles <- c( "Distance", "Closeness", "Standardized Closeness")
cols <- c( "lightblue", "lightgreen", "orange" )
names <- rbind( names_dist, names_close, names_s_close )

# change the margins using the mar= argument
par( 
  mfrow=c( 2,2 ),
  mar=c( 0.1, 0.5, 1, 0.1 ) 
  )

for( i in 1:3 ){
  
  # set the seed
  set.seed( 507 )

  # render the plot
  gplot( 
  u_mat,
  gmode = "graph",
  label = names[i,],
  label.cex = 0.6,
  vertex.col = cols[i],
  main = titles[i]
  )

}

```

### Using the `sna` Package

Alternatively, we could just use the `closeness()` function in the `sna` package. First, take a look at the function using `?closeness`. Note that the standardized closeness centrality is reported by default. If we want the unstandardized closeness, we can just divide the result returned by `closeness()` by *g-1*.

```{r}

# standardized
closeness( u_mat,gmode="graph")

# raw
closeness( u_mat,gmode="graph" ) / ( g-1 )

```

### Closeness Centralization

We can also summarize the entire network in terms of how close nodes are to each other. *Group closeness centralization* tells us how much variation there is in the closeness scores. As we saw in the textbook chapters on [Degree Centrality](https://jacobtnyoung.github.io/snaca-textbook/snaca-centrality-degree.html) and [Closeness Centrality](https://jacobtnyoung.github.io/snaca-textbook/snaca-centrality-closeness.html), this measure is bound between 0 and 1 where a value of 0 indicates complete uniformity across nodes in their centrality scores and a value of 1 indicates that one node has the highest possible centrality score, and all others are at the minimum.

This is calculated as: $C_C = \frac{\sum\limits_{i=1}^g[C'_C(n^*)-C'_C(n_i)]}{[(g-2)(g-1)]/(2g-3)}$.

Where $C'_C(n^*)$ is the maximum or largest standardized closeness centrality score. For a more elaborate discussion of this equation, see [@wasserman1994social, p. 191-192]. To calculate the group closeness centrality, we can use the `centralization()` function in `sna` and specify `closeness` in the `FUN` argument.

```{r}

?centralization

centralization( u_mat, closeness, mode="graph" )

```

*What does the centralization score of `r round( centralization( u_mat, closeness, mode="graph" ), 2 )` tell us?*

## Closeness Centrality (Directed Binary Graphs)

In a directed binary graph, closeness centrality has the same interpretation (i.e. it is the inverse of the average distance between nodes), but it takes into account the directional nature of the graph.

For example, consider two scenarios:

-   Suppose Laura sends a tie to Miguel and he sends a tie to Bruce (i.e. Laura -\> Miguel -\> Bruce). Here, Laura is of distance 2 from Bruce.
-   Now suppose Laura sends a tie to Miguel and Bruce sends a tie to Miguel (i.e. Laura -\> Miguel \<- Bruce).
-   *How far is Laura from Bruce now?*

Let's take a look at this using the network from the [Closeness Centrality](https://jacobtnyoung.github.io/snaca-textbook/snaca-centrality-closeness.html) chapter.

```{r}

# Build the object
d_mat <- rbind(
  c( 0,1,0,0,0 ),
  c( 0,0,1,0,0 ),
  c( 0,0,0,1,1 ),
  c( 0,0,1,0,1 ),
  c( 0,0,1,1,0 )
  )

# name the rows and columns
rownames( d_mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
colnames( d_mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )

# define g
g <- dim( d_mat )[1]

```

### Manually Calculating Closeness Centrality

We can manually calculate the distance matrix using the `geodist()` function in the `sna` package as we did above.

```{r}

# calculate distances
distances <- geodist( d_mat )

# get the geodesics
geodesics <- distances$gdist

# take a look
geodesics

```

Something look different?

Let's recode those `Inf` values to be zero and chug on.

```{r}

# code Inf values as zero
geodesics[geodesics == Inf] <- 0 

# take a look now
geodesics

```

```{r}

# unstandardized closeness
1/rowSums( geodesics ) 

# standardized closeness
( 1/rowSums( geodesics ) ) * ( g - 1 )

```

### Using the `sna` Package

Alternatively, we could (again) just use the `closeness()` function in the `sna` package. Remember that the standardized closeness centrality is reported by default. If we want the unstandardized closeness, we can just divide the result returned by `closeness()` by *g-1*.

```{r}

# standardized closeness
closeness( d_mat, gmode="digraph" )

# unstandardized closeness
closeness( d_mat, gmode="digraph" ) / ( g-1 )

```

### Closeness Centralization

As discussed in [@wasserman1994social, p. 200-201], the denominator is not defined for closeness centralization for directed graphs. Yet, score can be computed using the `centralization()` function.

```{r}

centralization( d_mat, closeness, mode="digraph" )

```

*What does the centralization score of `r round( centralization( d_mat, closeness, mode="digraph" ), 2 )` tell us?*

## Closeness Centrality in PINS *Get Along With* Network

The [*Prison Inmate Networks Study (PINS)*](https://cjrc.la.psu.edu/active-funded-research-projects/completed-projects/) examines the social networks of prison inmates in a state correctional institution. The study was unique in that it was the first in nearly a century to collect sociometric data in a prison. The researchers collected data on several types of networks. There are two we want to look at here:

-   The *get along with network* was created by asking individuals whom they "get along with" on the unit. We can think of this as "friends" in a prison setting. (People don't really have "friends" in prison, but there are people they "get along with")

-   The *power and influence network* was created by asking individuals whom they believed was "powerful and influential" on the unit.

Let's examine the closeness centrality scores for both of these networks.

### Get Along with Network (Undirected Network)

For the *get along with* network, individuals could have asymmetric nominations. That is, *i* could nominate *j* and *j* didn't necessarily nominate *i*. But, we are going to **symmetrize** the network by only taking ties for which ***both*** *i* and *j* indicated that the get along with the other person. This will give us an undirected network.

```{r}

# set the location for the file
loc <- "https://github.com/jacobtnyoung/snaca-r/raw/main/data/data-PINS-getalong-w1-adj.csv"

# read in the .csv file
ga_mat <- as.matrix(
  read.csv( 
    loc,
    as.is = TRUE,
    header = TRUE,
    row.names = 1 
    )
  )

# use the symmetrize() function to create an undirected matrix
ga_mat_u <- symmetrize( ga_mat, rule = "strong" )

# create the network object
ga_net_u <- as.network( ga_mat_u, directed = FALSE )

```

<br>

Now, we have created an undirected network where ties represent "get along with" nominations from both individuals.

Before we calculate the closeness scores, recall that in a graph with multiple components (i.e. disconnected subgraphs) individuals who cannot be reached will have a closeness score of zero. So, what do we do? Call it a day and go home? (We could, but we have some options)

What often happens in practice when we have multiple components in a network is that researchers will take the "first component" and analyze the closeness scores for that graph. The first component is the largest subgraph in a graph. We can see this visually in the following plot:

```{r,echo=FALSE}

# find the component membership
cd <- component.dist( as.matrix( ga_net_u ), connected="weak" )

# find which component is the largest
# sort( table( cd$membership ) ) # commented out to hide in .html

# assign the membership in the first component
comp_col <- cd$membership
comp_col[ cd$membership != 4 ] <- "#3275a8"
comp_col[ cd$membership == 4 ] <- "#9cde18"

```

```{r,echo=FALSE, figure.align = "center", figure.height = 5, figure.width = 5}

set.seed ( 507 )
gplot( ga_net_u, gmode = "graph", vertex.col = comp_col, main = "Get Along With Network (Undirected)" )

```

In the plot above, the first component (i.e. the largest subgraph) is colored green. To get the closeness centrality scores, we can use a function called `get.inducedSubgraph()` in the `sna` package to extract a subgraph that meets a condition. In this case, we want to take those cases who are in the first component. Let's walk through the pieces.

```{r, figure.align = "center", figure.height = 5, figure.width = 5}

# find the component membership
cd <- component.dist( as.matrix( ga_net_u ), connected="weak" )

# find which component is the largest
sort( table( cd$membership ) )

# we can see that group number 4 is the largest group. This is the first component.
# so, we can assign the membership in the first component
first_comp <- cd$membership
first_comp[ cd$membership != 4 ] <- 0
first_comp[ cd$membership == 4 ] <- 1

# now we set this as a network attribute
ga_net_u %v% "first_comp" <- first_comp

# Now, remove those not in the first component by using the get.inducedSubgraph() function.
# Specifically, we stipulate in the v= argument that we only want vertices that are in the first component.
ga_net_ucomp <- get.inducedSubgraph( 
  ga_net_u, # the network                 
  v = which( ga_net_u %v% "first_comp" == 1 )  # the condition
  )

# Now, take a look at the plot.
gplot( 
  ga_net_ucomp, 
  gmode = "graph",
  edge.col="grey40", 
  vertex.col="#9cde18", 
  main = "First Component of Get\n Along With Network (Undirected)" )

```

Now, let's calculate our closeness scores:

```{r}

# get the number of nodes
n_nodes <- dim( as.matrix( ga_net_ucomp ) )[1]

# unstandardized closeness
closeness( ga_net_ucomp, gmode="graph" ) / ( n_nodes - 1 )

# standardized closeness
closeness( ga_net_ucomp, gmode="graph" ) 

# Group Closeness Centralization.
centralization( ga_net_ucomp, closeness, mode="graph" )

```

```{r}

# define the rescale function
rescale <- function( nchar, low, high ){
  min_d <- min( nchar )
  max_d <- max( nchar )
  rscl  <- ( ( high - low )*( nchar - min_d ) ) / ( max_d - min_d ) + low
  rscl
}


# now, take a look at the plot
gplot( 
  ga_net_ucomp, 
  gmode = "graph",
  edge.col="grey40", 
  vertex.col="#9cde18",
  vertex.cex = rescale( closeness( ga_net_ucomp, gmode="graph" ), 0.4, 3 ),
  main = "First Component of Get\n Along With Network (Undirected)",
  sub = "node sized by closeness centrality"
  )

```

### Power and Influence Network (Directed Network)

For the *power and influence* network, individuals could have asymmetric nominations. That is, *i* could nominate *j* and *j* didn't necessarily nominate *i*. We will keep this asymmetry so that we can treat the network as directed.

```{r,echo=TRUE, eval=TRUE, message=FALSE}

# set the location for the file
loc <- "https://github.com/jacobtnyoung/snaca-r/raw/main/data/data-PINS-power-w1-adj.csv"

# read in the .csv file
pi_mat <- as.matrix(
  read.csv( 
    loc,
    as.is = TRUE,
    header = TRUE,
    row.names = 1 
    )
  )

# create the network object
pi_net_d <- as.network( pi_mat, directed = TRUE )

```

Now, we have created a directed network where ties represent "power and influence" nominations from *i* to *j*.

As before, we need to extract the first component:

```{r,echo=FALSE}

# find the component membership
cd <- component.dist( as.matrix( pi_net_d ), connected="weak" )

# find which component is the largest
# sort( table( cd$membership ) ) # commented to hide in the .html

# assign the membership in the first component
comp_col <- cd$membership
comp_col[ cd$membership != 1 ] <- "#3275a8"
comp_col[ cd$membership == 1 ] <- "#ab163b"

```

```{r,echo=FALSE, figure.align = "center", figure.height = 5, figure.width = 5}

set.seed ( 507 )
gplot( pi_net_d, gmode = "digraph", vertex.col = comp_col, main = "Power Network (Directed)" )

```

In the plot above, the first component (i.e. the largest subgraph) is shown in red. Now, let's again use the `get.inducedSubgraph()` function in the `sna` package to extract a subgraph that meets the first component condition.

```{r, figure.align = "center", figure.height = 5, figure.width = 5}

# find the component membership
cd <- component.dist( as.matrix( pi_net_d ), connected="weak" )

# find which component is the largest
sort( table( cd$membership ) )

# we can see that group number 1 is the largest group. This is the first component.
# so, we can assign the membership in the first component
first_comp <- cd$membership
first_comp[ cd$membership != 1 ] <- 0
first_comp[ cd$membership == 1 ] <- 1

# now we set this as a network attribute
pi_net_d %v% "first_comp" <- first_comp

# Now, remove those not in the first component by using the get.inducedSubgraph() function.
# Specifically, we stipulate in the v= argument that we only want vertices that are in the first component.
pi_net_d_comp <- get.inducedSubgraph( 
  pi_net_d, # the network                 
  v = which( pi_net_d %v% "first_comp" == 1 )  # the condition
  )

# Now, take a look at the plot
gplot( 
  pi_net_d_comp, 
  gmode = "digraph",
  edge.col="grey40", 
  vertex.col="#ab163b", 
  main = "First Component of Power\n Network (Directed)" )

```

Now, let's calculate our closeness scores. Note a slight change though, in the `closeness()` function there is the `gmode=` argument where we specify whether the graph is directed (i.e. `"digraph"` or undirected `"graph"`. If we use `gmode = "digraph"` we will get all zeros because it is using the directionality of the network. For our purposes here, we will set it to `gmode = "graph"` so we can actually get values:

```{r}

# get the number of nodes
n_nodes <- dim( as.matrix( pi_net_d_comp ) )[1]

#unstandardized closeness
closeness( pi_net_d_comp, gmode="graph" ) / ( n_nodes - 1 ) 

#standardized closeness
closeness( pi_net_d_comp, gmode="graph" ) 

# Group Closeness Centralization
centralization( pi_net_d_comp, closeness, mode="graph" )

# Now, take a look at the plot
gplot( 
  pi_net_d_comp, 
  gmode = "digraph",
  edge.col="grey40", 
  vertex.col="#ab163b",
  vertex.cex = rescale( closeness( pi_net_d_comp, gmode="graph" ), 0.4, 3 ),
  main = "First Component of Power\n Network (Directed)",
  sub = "node sized by closeness centrality"
  )

```

A few questions:

-   What do we see in the plot?
-   What does the closeness centralization score of `r round( centralization( pi_net_d_comp, closeness, mode="graph" ), 2 )` indicate?

## Test Your Knowledge Exercises

-   Explain the concept of closeness centrality in your own words. How does it differ from degree centrality?
-   Using the `u_mat` matrix in the tutorial, manually calculate the closeness centrality for the node "Jen." Show your calculations step by step.
-   Using the "Get Along With" network, identify why only the largest component is analyzed for closeness centrality. What are the potential consequences of ignoring smaller components?
-   In the "Power and Influence Network," why do we adjust the `gmode` argument when calculating closeness centrality? What are the implications of analyzing a directed network as undirected?
-   For both the "Get Along With" and "Power and Influence" networks, calculate the standardized closeness centrality for a specific node of your choice. Compare the results between the two networks.
-   Interpret the group closeness centralization score for the "Get Along With" network. What does this score reveal about the structure of the network?
-   Explain why `Inf` values appear in the geodesic distance matrix for directed graphs and how these values are handled during calculations.
-   Using the "Power and Influence Network," examine the visual representation of the first component. What structural patterns do you observe, and how do these relate to the closeness centrality scores?
-   After calculating the closeness centralization scores for both networks, compare their values. What do the differences in scores suggest about the overall structure of the two networks?

## Tutorial Summary

This tutorial provided an introduction to calculating closeness centrality and centralization in network analysis using R. It begins by explaining the theoretical foundation of closeness centrality, emphasizing its distinction from degree centrality by focusing on the inverse of the average distance between nodes. The tutorial demonstrates how to manually compute closeness centrality using the `geodist()` function from the `sna` package and visualize results through network plots. It covered both undirected and directed graphs, highlighting the nuances of analyzing asymmetric relationships and handling disconnected components. Additionally, the tutorial introduced the concept of group closeness centralization, which measures the variability in closeness scores across the network, and explains how to compute it using the `centralization()` function. Real-world examples, such as the "Get Along With" and "Power and Influence" networks from the Prison Inmate Networks Study (PINS), illustrate the practical application of these metrics.
